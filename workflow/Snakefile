configfile: "config/config.yaml"


INPUT_DIR = config['input_dir']

STAGE_LIST = config['stage_list']

CHR_LIST = config['chr_list']


def get_resource(rule, resource):
    try:
        return config["resources"][rule][resource]
    except KeyError:
        return config["resources"]["default"][resource]


rule all:
    input:
        [f"results/{stage}/{chr}_{stage}.bam.bai" for stage in STAGE_LIST for chr in CHR_LIST]

rule bamtobed: 
    input:
        stage_bam = f"{INPUT_DIR}/{{stage}}_LASeR/sim.srt.bam" 
    output:
        stage_bed = f"resources/{{stage}}.bed"
    log:
        f"results/log/bamtobed/{{stage}}.log"
    benchmark:
        f"results/log/bamtobed/{{stage}}.bmk"
    threads: get_resource("bamtobed", "threads")
    resources:
        mem_mb = get_resource("bamtobed", "mem_mb"),
        runtime = get_resource("bamtobed", "runtime"),
        slurm_partition = get_resource("bamtobed", "partition")
    conda:
        "envs/bedtools.yaml"
    shell:"""
        bedtools bamtobed -i {input.stage_bam} > {output.stage_bed}
    """

rule chr_meter:
    input:
        stage_bed = f"resources/{{stage}}.bed"
    output:
        chr_bed = f"results/{{stage}}/{{chr}}_{{stage}}.bed"
    log:
        f"results/log/chr_meter/{{chr}}_{{stage}}.log"
    benchmark:
        f"results/log/chr_meter/{{chr}}_{{stage}}.bmk"
    threads: get_resource("chr_meter", "threads")
    resources:
        mem_mb = get_resource("chr_meter", "mem_mb"),
        runtime = get_resource("chr_meter", "runtime"),
        slurm_partition = get_resource("chr_meter", "partition")
    shell: """
    awk -v chr={wildcards.chr} 'BEGIN{{OFS="\\t"}} {{
        split($4, arr, "|")
        split(arr[2], coords, ",")
        split(coords[1], chr_info, "_")
        if (chr_info[1] == chr) {{
            print chr_info[1], chr_info[2], chr_info[3]
            exit
        }}
    }}' {input.stage_bed} > {output.chr_bed}
    """

rule intersect:
    input: 
        chr_bed = f"results/{{stage}}/{{chr}}_{{stage}}.bed",
        stage_bam = f"{INPUT_DIR}/{{stage}}_LASeR/sim.srt.bam" 
    output:
        chr_bam = f"results/{{stage}}/{{chr}}_{{stage}}.bam"
    log:
        f"results/log/intersect/{{chr}}_{{stage}}.log"
    benchmark:
        f"results/log/intersect/{{chr}}_{{stage}}.bmk"
    threads: get_resource("intersect", "threads")
    resources:
        mem_mb = get_resource("intersect", "mem_mb"),
        runtime = get_resource("intersect", "runtime"),
        slurm_partition = get_resource("intersect", "partition")
    conda:
        "envs/bedtools.yaml"
    shell:"""
        bedtools intersect -abam {input.stage_bam} -b {input.chr_bed} \
        -wa > {output.chr_bam}
    """

rule index:
    input:
        chr_bam = f"results/{{stage}}/{{chr}}_{{stage}}.bam"
    output:
        chr_bai = f"results/{{stage}}/{{chr}}_{{stage}}.bam.bai"
    log:
        f"results/log/index/{{chr}}_{{stage}}.log"
    benchmark:
        f"results/log/index/{{chr}}_{{stage}}.bmk"
    threads: get_resource("index", "threads")
    resources:
        mem_mb = get_resource("index", "mem_mb"),
        runtime = get_resource("index", "runtime"),
        slurm_partition = get_resource("index", "partition")
    conda:
        "envs/samtools.yaml"
    shell:"""
        samtools index {input.chr_bam}
    """